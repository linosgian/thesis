input {
	beats {
		port => 5044    
	}
	syslog {
		type => "syslog"
		port => 57889
	}
}
filter {	
	mutate {
		# TODO: Remove hardcoded district and add an environment variable.
		add_field => [ "district", "netmode" ]
	}
	if [type] == "syslog" {
		if "_grokparsefailure_sysloginput" in [tags] {
		mutate { remove_tag => "_grokparsefailure_sysloginput" }
		}
		# Preprocess syslog events in order to follow the normal pipeline
		mutate { add_field => [ "service" , "sshd" ] }
		mutate { replace => { "type" => "auth" } }
		mutate { 
			remove_field => ["priority", "facility","facility_label", "severity", "severity_label", "timestamp"]
    	}
    	mutate { gsub => [ "message", "<38>", ""] }

	}
	if [service] == "nginx"{
		grok {
			patterns_dir => ["/opt/logstash/patterns"]
			match => {"message" => ["%{NGINXACCESS}"]}
			add_tag => "NGINXACCESS"
		}
		if "_grokparsefailure" in [tags] {
			mutate { add_tag => "MALFORMED_REQUEST" }
			mutate { remove_tag => "_grokparsefailure" }
			grok {
				patterns_dir => ["/opt/logstash/patterns"]
				match => {"message" => "%{NGINXMALFORMED}"}
			}
		}
		mutate { add_field => { "received_at" => "%{@timestamp}" } }
		date{ 
			match => ["timestamp", "dd/MMM/YYYY:HH:mm:ss Z"] 
			locale => "en"
		}	
	}else if [service] == "sshd"{
		if "message repeated" in [message] {
			# Hold the number of repeats in a variable 
			# and discard the "message repeated" part
			grok { 
				match => {"message" => "message repeated %{NUMBER:repeat} times: \[ "}
				add_tag => "SYSLOGREPEAT"
			}
			mutate {
				gsub => [
					"message", "message repeated (?<![0-9.+-])(?>[+-]?(?:(?:[0-9]+(?:\.[0-9]+)?)|(?:\.[0-9]+))) times: \[ ", ""
				]
			}
		}
		# Concerns machines that mainly operate on password auth 
		if "invalid user" in [message] {
			grok{
				patterns_dir => ["/opt/logstash/patterns"]
				match => {"message" => "%{SSHINVALIDUSER}"}
				add_field => { "logline_type" => "SSHINVALIDUSER" }
			}
		}else if "Failed" in [message]{
			grok {
				patterns_dir => ["/opt/logstash/patterns"]
				match => {"message" => "%{SSHFAILEDLOGIN}"}
				add_field => { "logline_type" => "SSHFAILEDLOGIN" }
			}
		}
		# Concerns machines that only accept PKI auth methods
		else if "Invalid" in [message] {
			grok {
				patterns_dir => ["/opt/logstash/patterns"]
				match => {"message" => "%{SSHINVALIDUSERPKI}"}
				add_field => { "logline_type" => "SSHINVALIDUSERPKI" }
			}
		}else if "Connection closed by" in [message] {
			grok {
				patterns_dir => ["/opt/logstash/patterns"]
				match => {"message" => "%{SSHCONNCLOSEDPKI}"}
				add_field => { "logline_type" => "SSHCONNCLOSEDPKI" }
			}
		# Concerns FreeBSD machines
		}else if "illegal user" in [message] {
			grok {
				patterns_dir => ["/opt/logstash/patterns"]
				match => {"message" => "%{SSHINVALIDUSERF}" }
				add_field => { "logline_type" => "SSHINVALIDUSERF" }
			}
		}else if "PAM" in [message] {
			grok {
				patterns_dir => ["/opt/logstash/patterns"]
				match => {"message" => "%{SSHFAILEDLOGINF}" }
				add_field => { "logline_type" => "SSHFAILEDLOGINF" }
			}
		# Concerns banner grabbing techinques
		}else if "Did not receive" in [message] {
			grok {
				patterns_dir => ["/opt/logstash/patterns"]
				match => {"message" => "%{SSHBANNERGRAB}"}
				add_field => { "logline_type" => "SSHBANNERGRAB" }
			}

		}else { mutate{ add_tag => "_grokparsefailure"} }
		
		mutate { add_field => { "received_at" => "%{@timestamp}" } }

		date{ match => ["syslog_time", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss"] }
	
	}else if [service] == "dovecot"{
		grok {
			patterns_dir => ["/opt/logstash/patterns"]
			match => {"message" => ["%{DOVECOTFAILED}"]}
			add_tag => "DOVECOTFAILED"
		}
		mutate { add_field => { "received_at" => "%{@timestamp}" } }

		date{ match => ["syslog_time", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss"] }
	
	# If an event does not match any known service, drop it.
	}else { drop {} }

	mutate { remove_field => ["syslog_time","timestamp", "input_type", "beat"] }
}

output {
	if "_grokparsefailure" in [tags] or  "_dateparsefailure" in [tags]{
		file {
			path => "/var/log/logstash/logstash.std.out" 
			codec => rubydebug
		}
	}else{
		elasticsearch{
			template_overwrite => true
			template => "/etc/logstash/elasticsearch-template.json"
			index => "%{district}-logstash-%{+YYYY.MM.dd}"
			hosts => ["localhost:9200"]
		}
	}
}
